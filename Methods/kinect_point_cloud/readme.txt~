PROJECTING REGION OF INTEREST IN IMAGE TO POINT CLOUD

UNDERLYING MATHS 
cloud->points[k]
where k is the index of point 
and let index for image is img.at<uchar>(i,j)
then relation between k and  i and j is k=640*i+j;        //refernece :http://www.pcl-users.org/point-cloud-to-pixel-td4035641.html

let the region of interest be (120,150)[left top corner] and (240,300)[bottom right corner]
we need too publish all the index of image between the region
if(k/640>=120 && k/640<=240 && k%640>=150 && k%640<=300)
{
mycoud->point[k]=cloud->points[k];
...
...
...
...
}
 

REMOVING BACKGROUND NOISE
we  calculate the cecntroid of published point cloud 

to remove outliers and filter point cloud we use eucledian filtering

to remove the background noise we create a new point cloud with z cordinate less than the centroid of previous point cloud


EXECUTABLES AND SOURCE FILES

pointcloudcatpure.cpp is used for storing given point cloud as pcd file
{press r while viewing for adjusting zoom and press spacebar for taking pcd file}

main.cpp is source file for generating the final point cloud which tells the centroid. It creates executable file as opnniviewer. The dimensions of published centroid is in meters.

CLUSTERING.CPP ti is used for clustering point cloud using eucledian clustering algorithm 
there is no as such improvement in accuracy of distance after applying this filter


 
